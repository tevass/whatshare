// Cannot use `NULL` for multiples one-to-one realtions
// https://github.com/prisma/prisma/issues/3387

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum WhatsAppStatus {
  disconnected
  connecting
  connected
}

model WhatsApp {
  id     String         @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  qrCode String?        @map("qr_code")
  status WhatsAppStatus

  attendantsIds String[]    @map("attedants_ids") @db.ObjectId
  attendants    Attendant[] @relation(fields: [attendantsIds], references: [id])

  chats    Chat[]
  messages Message[]

  @@map("whats_apps")
}

model AttendantProfile {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  email       String @unique
  name        String
  displayName String @map("display_name")

  attendant       Attendant?
  messages        Message[]  @relation("SendMessageBy")
  revokedMessages Message[]  @relation("RevokeMessageBy")

  @@map("attendant_profiles")
}

model Attendant {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  password String?

  profileId    String   @unique @map("profile_id") @db.ObjectId
  whatsAppsIds String[] @map("whats_apps_ids") @db.ObjectId

  profile   AttendantProfile @relation(fields: [profileId], references: [id])
  whatsApps WhatsApp[]       @relation(fields: [whatsAppsIds], references: [id])

  @@map("attendants")
}

model Contact {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  waContactId    String  @unique @map("wa_contact_id")
  name           String
  phone          String  @unique
  formattedPhone String  @map("formatted_phone")
  imageUrl       String? @map("image_url")

  isGroup      Boolean @map("is_group")
  isBusiness   Boolean @map("is_business")
  isEnterprise Boolean @map("is_enterprise")
  isMyContact  Boolean @map("is_my_contact")

  chats Chat[]

  vCardsMessagesIds String[]  @map("vcards_messages_ids") @db.ObjectId
  vCardsMessages    Message[] @relation("MessageVCardsContacts", fields: [vCardsMessagesIds], references: [id])

  messages Message[] @relation("MessageAuthor")

  @@map("wa_contacts")
}

model Chat {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  waChatId      String  @map("wa_chat_id")
  whatsAppId    String  @map("whats_app_id") @db.ObjectId
  contactId     String  @map("contact_id") @db.ObjectId
  lastMessageId String? @map("last_message_id") @db.ObjectId

  unreadCount Int @map("unread_count")

  lastInteraction DateTime? @map("last_interaction_date")
  deletedAt       DateTime? @map("deleted_at")

  contact  Contact   @relation(fields: [contactId], references: [id])
  whatsApp WhatsApp  @relation(fields: [whatsAppId], references: [id])
  messages Message[] @relation("ChatMessages")

  lastMessage Message[] @relation("LastMessage")

  @@unique([waChatId, whatsAppId])
  @@index([waChatId])
  @@map("wa_chats")
}

model Media {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  key      String @unique
  mimetype String

  message Message[]

  @@map("medias")
}

enum MessageAck {
  error
  pending
  sent
  read
  played
}

enum MessageType {
  text
  audio
  voice
  image
  video
  document
  sticker
  vcard
  multi_vcard
  revoked
  unknown
}

type MessageBody {
  header  String?
  content String
}

model Message {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  waMessageId String  @unique @map("wa_message_id")
  waChatId    String  @map("wa_chat_id")
  whatsAppId  String  @map("whats_app_id") @db.ObjectId
  chatId      String  @map("chat_id") @db.ObjectId
  authorId    String? @map("author_id") @db.ObjectId
  senderId    String? @map("sender_id") @db.ObjectId
  revokerId   String? @map("revoker_id") @db.ObjectId

  ack      MessageAck
  type     MessageType
  body     MessageBody?
  mediaId  String?      @map("media_id") @db.ObjectId
  quotedId String?      @map("quoted_id") @db.ObjectId

  isBroadcast Boolean @map("is_broadcast")
  isForwarded Boolean @map("is_forwarded")
  isFromMe    Boolean @map("is_from_me")
  isStatus    Boolean @map("is_status")
  isGif       Boolean @map("is_gif")

  createdAt DateTime  @map("created_at")
  revokedAt DateTime? @map("revoked_at")

  vCardsContactsIds String[]  @map("vcards_contacts_ids") @db.ObjectId
  vCardsContacts    Contact[] @relation("MessageVCardsContacts", fields: [vCardsContactsIds], references: [id])

  author     Contact?          @relation("MessageAuthor", fields: [authorId], references: [id])
  media      Media?            @relation(fields: [mediaId], references: [id])
  senderBy   AttendantProfile? @relation("SendMessageBy", fields: [senderId], references: [id])
  revokedBy  AttendantProfile? @relation("RevokeMessageBy", fields: [revokerId], references: [id])
  quoted     Message?          @relation("MessageQuoted", fields: [quotedId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies    Message[]         @relation("MessageQuoted")
  chat       Chat              @relation("ChatMessages", fields: [chatId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  whatsApp   WhatsApp          @relation(fields: [whatsAppId], references: [id])
  lastOfChat Chat?             @relation("LastMessage", fields: [chatId], references: [id])

  @@unique([waChatId, whatsAppId, createdAt])
  @@index([waChatId])
  @@map("wa_messages")
}
