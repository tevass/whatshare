// Cannot use `NULL` for multiples one-to-one realtions
// https://github.com/prisma/prisma/issues/3387

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum WhatsAppStatus {
  disconnected
  connecting
  connected
}

model WhatsApp {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  qrCode        String?
  status        WhatsAppStatus
  attendantsIds String[]       @db.ObjectId

  attendants Attendant[] @relation(fields: [attendantsIds], references: [id])
  chats      Chat[]
  messages   Message[]

  @@map("whats_apps")
}

model AttendantProfile {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  email       String @unique
  name        String
  displayName String

  attendant       Attendant?
  messages        Message[]  @relation("SendMessageBy")
  revokedMessages Message[]  @relation("RevokeMessageBy")

  @@map("attendant_profiles")
}

model Attendant {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  password     String?
  profileId    String   @unique @db.ObjectId
  whatsAppsIds String[] @db.ObjectId

  whatsApps WhatsApp[]       @relation(fields: [whatsAppsIds], references: [id])
  profile   AttendantProfile @relation(fields: [profileId], references: [id])

  @@map("attendants")
}

model Contact {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  waContactId       String   @unique
  name              String
  phone             String   @unique
  formattedPhone    String
  imageUrl          String?
  isGroup           Boolean
  isBusiness        Boolean
  isEnterprise      Boolean
  isMyContact       Boolean
  isWAClient        Boolean
  chatsIds          String[] @db.ObjectId
  mentionsIds       String[] @db.ObjectId
  vCardsMessagesIds String[] @db.ObjectId

  vCardsMessages Message[] @relation("MessageVCardsContacts", fields: [vCardsMessagesIds], references: [id])
  groups         Chat[]    @relation("ChatGroupParticipants", fields: [chatsIds], references: [id])
  chats          Chat[]    @relation("ChatContact")
  messages       Message[] @relation("MessageAuthor")
  mentions       Message[] @relation("MessageMentions", fields: [mentionsIds], references: [id])

  @@map("wa_contacts")
}

model Chat {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  waChatId        String
  whatsAppId      String    @db.ObjectId
  contactId       String    @db.ObjectId
  lastMessageId   String?   @db.ObjectId
  unreadCount     Int
  lastInteraction DateTime?
  deletedAt       DateTime?
  isGroup         Boolean
  participantsIds String[]  @db.ObjectId

  participants Contact[] @relation("ChatGroupParticipants", fields: [participantsIds], references: [id])
  contact      Contact   @relation("ChatContact", fields: [contactId], references: [id])
  whatsApp     WhatsApp  @relation(fields: [whatsAppId], references: [id])
  messages     Message[] @relation("ChatMessages")
  lastMessage  Message[] @relation("LastMessage")

  @@unique([waChatId, whatsAppId])
  @@index([waChatId])
  @@map("wa_chats")
}

model Media {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  key      String @unique
  mimetype String

  message Message[]

  @@map("medias")
}

enum MessageAck {
  error
  pending
  sent
  read
  played
}

enum MessageType {
  text
  audio
  voice
  image
  video
  document
  sticker
  vcard
  multi_vcard
  revoked
  unknown
}

type MessageBody {
  header  String?
  content String
}

model Message {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  waMessageId       String       @unique
  waChatId          String
  whatsAppId        String       @db.ObjectId
  chatId            String       @db.ObjectId
  ack               MessageAck
  type              MessageType
  body              MessageBody?
  senderId          String?      @db.ObjectId
  revokerId         String?      @db.ObjectId
  mediaId           String?      @db.ObjectId
  quotedId          String?      @db.ObjectId
  authorId          String?      @db.ObjectId
  mentionsIds       String[]     @db.ObjectId
  vCardsContactsIds String[]     @db.ObjectId

  isForwarded Boolean
  isFromMe    Boolean
  isGif       Boolean
  isBroadcast Boolean
  isStatus    Boolean

  createdAt DateTime
  revokedAt DateTime?

  author         Contact?          @relation("MessageAuthor", fields: [authorId], references: [id])
  media          Media?            @relation(fields: [mediaId], references: [id])
  senderBy       AttendantProfile? @relation("SendMessageBy", fields: [senderId], references: [id])
  revokedBy      AttendantProfile? @relation("RevokeMessageBy", fields: [revokerId], references: [id])
  quoted         Message?          @relation("MessageQuoted", fields: [quotedId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies        Message[]         @relation("MessageQuoted")
  chat           Chat              @relation("ChatMessages", fields: [chatId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  whatsApp       WhatsApp          @relation(fields: [whatsAppId], references: [id])
  lastOfChat     Chat?             @relation("LastMessage", fields: [chatId], references: [id])
  mentions       Contact[]         @relation("MessageMentions", fields: [mentionsIds], references: [id])
  vCardsContacts Contact[]         @relation("MessageVCardsContacts", fields: [vCardsContactsIds], references: [id])

  @@unique([waChatId, whatsAppId, createdAt])
  @@index([waChatId])
  @@map("wa_messages")
}
